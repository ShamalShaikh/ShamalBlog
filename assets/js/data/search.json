[ { "title": "DeepSeek&#39;s Game-Changing Approach to Large Language Models", "url": "/ShamalBlog/posts/DeepSeek-Innovation/", "categories": "AI, Research", "tags": "deepseek, llm, moe, ai-research", "date": "2025-02-08 12:00:00 +0530", "snippet": "The Rise of DeepSeek üöÄIn the rapidly evolving landscape of Large Language Models (LLMs), DeepSeek has emerged as a groundbreaking player, challenging the dominance of closed-source models. What makes DeepSeek particularly interesting isn‚Äôt just its impressive performance‚Äîit‚Äôs the innovative approach to making advanced AI more accessible and efficient.Performance comparison of DeepSeek with other leading LLMsWhy DeepSeek Matters üéØOverview of DeepSeek‚Äôs key innovations and advantagesDeepSeek‚Äôs family of models, particularly DeepSeek-R1 and DeepSeek-v3, have captured the attention of the AI research community for several compelling reasons: Open Access: Unlike many leading models, DeepSeek shares its weights publicly Transparency: Detailed technical reports provide valuable insights into their methodology Competitive Performance: Matches or exceeds many closed-source alternatives Cost-Effective: Achieves state-of-the-art results with reasonable training costsThe Secret Sauce: DeepSeek-v3‚Äôs Architecture üß†DeepSeek-v3‚Äôs innovative architectural components1. Multi-head Latent Attention (MLA)One of the most significant innovations in DeepSeek-v3 is its memory-efficient attention mechanism: Implements low-rank, joint projection Reduces KV cache size by 93% Dramatically improves memory efficiency compared to traditional 67B parameter models2. Expert Management SystemDeepSeek‚Äôs approach to Mixture-of-Experts (MoE) is particularly clever:# Simplified representation of DeepSeek&#39;s expert systemclass ExpertSystem: def __init__(self, num_experts, shared_experts): self.experts = fine_grained_experts(num_experts) self.shared = shared_experts self.bias_terms = initialize_bias()3. Novel Load Balancing üîÑDeepSeek‚Äôs efficient load balancing strategy visualization4. Multi-Token Prediction (MTP) üéØDeepSeek‚Äôs MTP approach represents a significant advancement over traditional next-token prediction: Predicts multiple future tokens Uses sequential prediction modules Improves efficiency and performanceThe Numbers That Matter üìäDeepSeek-v3‚Äôs specifications are impressive: 671B total parameters 37B active parameters 14.8 trillion token training corpus ~$5.6M training costTraining Pipeline üõ†Ô∏èDeepSeek‚Äôs comprehensive training pipeline visualizationThe model undergoes a sophisticated training process: Context extension to 32K and 128K Supervised Fine-Tuning (SFT) + RLHF Distillation from DeepSeek-R1Impact on AI Development üåüDeepSeek‚Äôs innovations have significant implications for the future of AI: Demonstrates the viability of open-source alternatives Provides a blueprint for efficient model architecture Shows how to balance performance with resource constraintsLooking Forward üîÆThe success of DeepSeek models points to a future where: Open-source models compete with closed-source alternatives Efficient architectures become increasingly important Innovation focuses on both performance and accessibilityConclusionDeepSeek‚Äôs approach to LLM development represents a significant step forward in making advanced AI more accessible and efficient. By combining innovative architectural choices with practical considerations about training costs and model efficiency, DeepSeek has created a blueprint for future LLM development.Note: For more technical details, check out our technical deep dives." }, { "title": "Building Production-Ready LLM Applications with FastAPI", "url": "/ShamalBlog/posts/FastAPI-LLM-Integration/", "categories": "Tutorials, Backend", "tags": "fastapi, python, llm, api-design", "date": "2025-02-05 12:00:00 +0530", "snippet": "Building Scalable LLM Applications with FastAPIIn this tutorial, I‚Äôll show you how to build a production-ready LLM application using FastAPI, focusing on best practices and performance optimization.Setting Up the Projectfrom fastapi import FastAPI, HTTPException, BackgroundTasksfrom pydantic import BaseModelfrom typing import List, Optionalimport asyncioimport logging# Initialize FastAPI app with metadataapp = FastAPI( title=&quot;LLM API Service&quot;, description=&quot;Production-ready LLM integration&quot;, version=&quot;1.0.0&quot;)# Configure logginglogging.basicConfig(level=logging.INFO)logger = logging.getLogger(__name__)Request/Response Modelsclass LLMRequest(BaseModel): prompt: str max_tokens: Optional[int] = 100 temperature: Optional[float] = 0.7 stream: Optional[bool] = Falseclass LLMResponse(BaseModel): text: str tokens_used: int model_version: strImplementing Rate Limitingfrom fastapi import Dependsfrom fastapi.middleware.throttling import ThrottlingMiddleware# Custom rate limiterclass RateLimiter: def __init__(self, max_requests: int, window_seconds: int): self.max_requests = max_requests self.window_seconds = window_seconds self.requests = {} async def check(self, client_id: str) -&amp;gt; bool: now = time.time() if client_id not in self.requests: self.requests[client_id] = [] # Clean old requests self.requests[client_id] = [ req_time for req_time in self.requests[client_id] if now - req_time &amp;lt; self.window_seconds ] if len(self.requests[client_id]) &amp;gt;= self.max_requests: return False self.requests[client_id].append(now) return TrueImplementing the LLM Serviceclass LLMService: def __init__(self): self.model = load_llm_model() # Your model loading logic self._request_queue = asyncio.Queue() self._batch_size = 5 self._processing_task = asyncio.create_task(self._process_queue()) async def generate(self, request: LLMRequest) -&amp;gt; LLMResponse: # Add request to queue future = asyncio.Future() await self._request_queue.put((request, future)) return await future async def _process_queue(self): while True: batch = [] try: # Collect batch_size requests or wait for timeout while len(batch) &amp;lt; self._batch_size: try: request, future = await asyncio.wait_for( self._request_queue.get(), timeout=0.1 ) batch.append((request, future)) except asyncio.TimeoutError: break if batch: # Process batch responses = await self._process_batch(batch) # Set results for (_, future), response in zip(batch, responses): future.set_result(response) except Exception as e: logger.error(f&quot;Error processing batch: {e}&quot;) for _, future in batch: if not future.done(): future.set_exception(e)API Endpoints@app.post(&quot;/generate&quot;, response_model=LLMResponse)async def generate_text( request: LLMRequest, background_tasks: BackgroundTasks, llm_service: LLMService = Depends(get_llm_service)): try: response = await llm_service.generate(request) # Add background task for analytics background_tasks.add_task( log_request_metrics, request=request, response=response ) return response except Exception as e: logger.error(f&quot;Error generating text: {e}&quot;) raise HTTPException(status_code=500, detail=str(e))Error Handling &amp;amp; Monitoring@app.middleware(&quot;http&quot;)async def add_monitoring(request: Request, call_next): start_time = time.time() try: response = await call_next(request) # Record metrics duration = time.time() - start_time status_code = response.status_code # Log metrics (replace with your monitoring solution) logger.info( f&quot;Request processed: duration={duration:.2f}s, &quot; f&quot;status={status_code}&quot; ) return response except Exception as e: logger.error(f&quot;Request failed: {e}&quot;) raiseBest Practices &amp;amp; Tips Batch Processing Group requests for better throughput Implement smart timeouts Handle partial batch failures Error Handling Implement proper error types Add detailed logging Use background tasks for metrics Performance Optimization Use connection pooling Implement caching Monitor resource usage Testing the Applicationfrom fastapi.testclient import TestClientimport pytest@pytest.fixturedef client(): return TestClient(app)def test_generate_text(client): response = client.post( &quot;/generate&quot;, json={ &quot;prompt&quot;: &quot;Test prompt&quot;, &quot;max_tokens&quot;: 50 } ) assert response.status_code == 200 assert &quot;text&quot; in response.json()View complete code on GitHub ‚Üí" }, { "title": "Cloud Architecture Decisions", "url": "/ShamalBlog/posts/cloud-architecture-decisions/", "categories": "", "tags": "", "date": "2025-02-03 00:00:00 +0530", "snippet": "Continue reading ‚Üí" }, { "title": "AI Weekly Digest: Latest in LLMs and Open Source AI", "url": "/ShamalBlog/posts/AI-Weekly-Digest/", "categories": "AI, News", "tags": "llm, open-source, ai-trends", "date": "2025-02-01 12:00:00 +0530", "snippet": "This Week in AI ü§ñMajor Open Source Releases Mistral AI‚Äôs new model outperforms GPT-3.5 Meta‚Äôs latest Code Llama shows impressive results DeepSeek‚Äôs innovations in model architectureIndustry Updates OpenAI‚Äôs latest research directions Google‚Äôs advancements in multimodal models Anthropic‚Äôs new safety measuresPractical Applications How companies are implementing RAG New frameworks for AI deployment Performance optimization techniquesRead more AI news ‚Üí" }, { "title": "Understanding AI Agents", "url": "/ShamalBlog/posts/Understanding-AI-Agents/", "categories": "Artificial Intelligence, AI Agents", "tags": "ai, agents, llm, automation", "date": "2025-01-27 15:00:00 +0530", "snippet": "IntroductionIn today‚Äôs rapidly evolving technological landscape, AI agents are becoming increasingly important tools for automation and decision-making. Let‚Äôs explore what they are and how they work.What is an AI Agent?An AI agent is a software program that: Interacts with its environment Collects and processes data Makes decisions to achieve goals Takes autonomous actionsThink of it as a digital assistant that can perceive, think, and act on its own.Key Characteristics1. Autonomy Acts independently Requires minimal human supervision Can include human oversight when needed2. Memory and Knowledge Stores information and preferences Personalizes interactions Leverages LLMs for advanced processing3. Perception Gathers environmental data Interprets information Makes informed decisions4. Tool Usage Accesses internet resources Uses code interpreters Integrates with APIs5. Collaboration Works with other agents Interacts with humans Enhances team productivityTypes of AI Agents Learning Agents Adapt from experience Improve over time Simple Reflex Agents React to current input Follow basic rules Model-Based Reflex Agents Maintain internal state Consider past experiences Goal-Based Agents Work toward objectives Plan actions strategically Utility-Based Agents Optimize for best outcomes Balance multiple factors System ArchitecturesSingle Agent SystemsPerfect for personal assistance and focused tasksMulti-Agent SystemsEnables complex problem-solving through collaborationHuman-Machine TeamsCombines human insight with AI capabilitiesNow Let‚Äôs Get Interactive üí≠Have you used AI agents before? Share your experience: What tasks did you automate? Which type of agent did you use? What were the results?I hope you liked it!Wanna know more about me?Follow me on GitHub and LinkedIn" }, { "title": "Would Universal Quantum Computers Make the P vs. NP Problem Trivial?", "url": "/ShamalBlog/posts/FAQ-Quantum-and-P-vs-NP/", "categories": "Quantum computing, Complexity Classes", "tags": "quantum, complexclasses", "date": "2024-12-31 21:30:00 +0530", "snippet": "Exploring the Intersection of Quantum Computing and Computational ComplexityThe P vs. NP question has captivated mathematicians and computer scientists for decades. It stands as one of the most profound open problems in theoretical computer science, with implications for cryptography, optimization, artificial intelligence, and beyond. But what happens to this age-old question if universal quantum computers‚Äîdevices capable of leveraging quantum mechanics for computation‚Äîbecome a reality? Would their development make the P vs. NP problem trivial?Let‚Äôs dive into this fascinating intersection of quantum computing and computational complexity.What Is the P vs. NP Problem?At its core, the P vs. NP problem asks:Can every problem whose solution can be verified in polynomial time also be solved in polynomial time?If the answer is yes, then P = NP. Otherwise, P ‚â† NP. This question defines the boundary between problems that are computationally ‚Äúeasy‚Äù (solvable efficiently) and those that are ‚Äúhard‚Äù (seemingly requiring non-polynomial time).What Role Do Quantum Computers Play?Quantum computers leverage the principles of quantum mechanics‚Äîsuperposition, entanglement, and interference‚Äîto process information differently than classical computers. The hype around quantum computing often stems from its potential to tackle problems that are intractable for classical machines.However, quantum computers exist within their own theoretical framework. Their computational class, BQP (Bounded-error Quantum Polynomial time), defines the set of problems solvable by quantum computers in polynomial time with high probability. This is separate from the classical classes P and NP.Would Quantum Computers Solve NP-Complete Problems?The short answer: not necessarily.The P vs. NP problem is defined in the context of classical computation. Even if quantum computers can efficiently solve some problems in NP, it does not automatically mean that P = NP in the classical sense.Quantum computers excel at specific types of problems‚Äîmost famously, factoring large numbers (e.g., Shor‚Äôs algorithm) and searching unstructured data (e.g., Grover‚Äôs algorithm). While Grover‚Äôs algorithm provides a quadratic speedup for search problems, it‚Äôs not enough to bring exponential problems down to polynomial time.NP-complete problems, such as the traveling salesman problem or Boolean satisfiability, are the hardest problems in NP. Quantum computers are not expected to solve these efficiently in general.‚ÄúQuantum Computers Solve Everything Faster‚Äù: Not true. Quantum computers provide speedups for specific classes of problems but don‚Äôt offer a blanket solution for all computational challenges.‚ÄúPhysical Construction Changes Theoretical Foundations‚Äù: The existence of physical quantum computers does not alter the theoretical definitions of P, NP, or BQP. These are abstract classes that define computational limits irrespective of physical realizations.So, What Would Change?While universal quantum computers wouldn‚Äôt make the P vs. NP problem trivial, they would expand our understanding of computation. They might help us reframe classical complexity questions or discover new algorithms that challenge current assumptions about problem difficulty.For instance:Quantum algorithms could redefine what we consider ‚Äútractable‚Äù for certain NP problems, even if they don‚Äôt collapse P and NP.Insights from quantum computing might inspire novel approaches to classical problems.Conclusion: The Beauty of ComplexityThe development of universal quantum computers represents a technological leap, but it doesn‚Äôt diminish the elegance and mystery of the P vs. NP problem. Instead, it highlights how interconnected our understanding of computation has become, bridging classical, quantum, and theoretical domains.As engineers, researchers, and enthusiasts, we have much to explore‚Äîrethinking what‚Äôs possible while respecting the limits of the unknown.Let me know your thoughts‚Äîdo you think quantum computing will redefine computational complexity, or will it coexist as a separate paradigm? Would love to hear your take!I hope you liked it!Wanna know more about me?Follow me on GitHub and LinkedIn" }, { "title": "How to send and reply to email (CS Majors)", "url": "/ShamalBlog/posts/howtoemail/", "categories": "Communication, Writing", "tags": "communication, writing", "date": "2024-11-05 21:30:00 +0530", "snippet": "How to send and reply to email (CS Majors)1. Email Is Not Mail:Use email as a structured communication tool, not electronic mail. So please use points, not paragraphs.2. Email Is Not Free: Reduce Opportunity Cost of emails by : Avoid unnecessary emails. Keep messages concise. Use clear and informative subjects. Break messages into points and prioritize them. Be polite and to the point.3. When to Send Email: First, check other sources like Google or Quora. Wait for in-person opportunities if possible. #### For programmers: Please test or debug code before asking questions via email. Do not email this question: What happens when I run the following code? code here 4. Crafting the Email:Subject Line: Informative and ideally under 72 characters. Place critical information in the subject. Message Format: Use strategic whitespace: Paragraphs work well for essays. If your email is an essay, go ahead and use paragraphs. If not, put a blank line after every point, which usually means after every independent thought, and certainly after every question. For example, don‚Äôt send the following: I had some ideas about using X to do Y. Is that possible? It doesn‚Äôt seem possible to do X without doing W. I also thought we might be able to do A. I saw paper on B. Did you read it? I really like Q because R, S and T. It should read: I had some ideas about using X to do Y. Is that possible? It doesn‚Äôt seem possible to do X without doing W. I also thought we might be able to do A. I saw a paper on B. Did you read it? Present points as a structured list. I really like Q because (1) R; (2) S; and (3) T. In short, shape the text to indicate the structure of your message. Strategic whitespace makes a document less threatening to a reader. Large blocks of text short-circuit reader attention. Action Items: Place actionable tasks at the top for visibility. Sorting: Prioritize critical points in the first few lines. Brevity: Adhere to the ‚Äúfive sentences rule‚Äù for concise emails.Replying to Emails: Address specific points instead of replying at the top of the message. For brief replies or single points, replying on top is acceptable. Remove irrelevant parts of the original email.5. Multiple Topics:Use separate emails for distinct topics to streamline processing.6. Manners:Use ‚ÄúPlease‚Äù and ‚ÄúThank you‚Äù appropriately. A simple ‚ÄúThanks!‚Äù can be more sincere than a formal closing.7. Reply-All Etiquette:**Use ‚ÄúReply All‚Äù thoughtfully‚Äîtrim unnecessary recipients after drafting.8. Advanced Tips for Programmers:Again: Please! Run the code, debug, and research before emailing questions.I hope you liked it!Wanna know more about me?Follow me on GitHub and LinkedIn" }, { "title": "What I&#39;m Building Next: 2024 Project Roadmap", "url": "/ShamalBlog/posts/Upcoming-Projects/", "categories": "Projects, Planning", "tags": "roadmap, development, ai", "date": "2024-03-25 12:00:00 +0530", "snippet": "Upcoming Projects1. AI-Powered Code Review Assistant Tech Stack: Python, GitHub API, OpenAI Status: Planning Phase Goal: Automate code reviews using AI Features: Style guide compliance checking Security vulnerability detection Performance optimization suggestions 2. Distributed System Monitor Tech Stack: Go, Prometheus, Grafana Status: Research Phase Goal: Real-time monitoring for microservices Features: Custom metrics collection Alerting system Performance analytics 3. ML Model Deployment Platform Tech Stack: Kubernetes, MLflow, FastAPI Status: Design Phase Goal: Streamline ML model deployment Features: Model versioning A/B testing Performance monitoring " }, { "title": "Building XCode2YCode: An AI-Powered Code Translation System", "url": "/ShamalBlog/posts/Building-XCode2YCode/", "categories": "Projects, AI", "tags": "llm, langchain, fastapi, python", "date": "2024-03-15 12:00:00 +0530", "snippet": "The Challenge of Cross-Language Code TranslationIn today‚Äôs polyglot programming world, translating code between languages is a common but complex challenge. Here‚Äôs how I built XCode2YCode to tackle this problem using state-of-the-art LLMs and modern software architecture.Architecture OverviewXCode2YCode uses a three-tier architecture: Frontend: React-based interface for code input/output Backend API: FastAPI server handling requests AI Engine: LangChain-powered translation coreKey Technical DecisionsWhy LangChain? Robust prompt management Built-in memory systems Easy integration with multiple LLM providersFastAPI Benefits Async support for better performance Automatic API documentation Type safety with PydanticImplementation ChallengesThe biggest hurdles were: Maintaining code structure Handling language-specific idioms Optimizing for performanceRead the full technical implementation on GitHub ‚Üí" }, { "title": "Building XCode2YCode: Technical Deep Dive into AI-Powered Code Translation", "url": "/ShamalBlog/posts/XCode2YCode-Technical-Deep-Dive/", "categories": "Projects, Technical", "tags": "llm, python, fastapi, system-design", "date": "2024-03-12 12:00:00 +0530", "snippet": "System Architecture Deep DiveToday, I‚Äôm sharing the technical details of how I built XCode2YCode, focusing on the architecture decisions and implementation challenges.The ChallengeConverting code between programming languages while maintaining: Semantic correctness Code style conventions Performance optimization Error handling patternsArchitecture Overviewgraph TD A[Frontend - React] --&amp;gt; B[API Gateway] B --&amp;gt; C[FastAPI Backend] C --&amp;gt; D[LangChain Controller] D --&amp;gt; E[LLM Service] D --&amp;gt; F[Code Analysis Engine] F --&amp;gt; G[AST Parser]Key Components Frontend Layer```typescript// React component for code inputconst CodeInput: React.FC = () =&amp;gt; { const [code, setCode] = useState(&#39;&#39;); const [targetLang, setTargetLang] = useState(&#39;python&#39;);const handleTranslation = async () =&amp;gt; { const result = await translateCode(code, targetLang); // Handle result };return ( // Component JSX );};2. **Backend API**```pythonfrom fastapi import FastAPI, HTTPExceptionfrom langchain import LLMChainapp = FastAPI()@app.post(&quot;/translate&quot;)async def translate_code( source_code: str, target_language: str) -&amp;gt; dict: try: result = await translation_chain.arun( code=source_code, target=target_language ) return {&quot;translated_code&quot;: result} except Exception as e: raise HTTPException(status_code=500, str(e))Performance Optimizations Caching Layer```pythonfrom functools import lru_cache@lru_cache(maxsize=1000)def get_translation_chain(model_name: str) -&amp;gt; LLMChain: return create_optimized_chain(model_name)2. **Batch Processing**```pythonasync def process_batch( codes: List[str], batch_size: int = 5) -&amp;gt; List[str]: results = [] for i in range(0, len(codes), batch_size): batch = codes[i:i + batch_size] tasks = [translate_single(code) for code in batch] batch_results = await asyncio.gather(*tasks) results.extend(batch_results) return resultsError Handling &amp;amp; Validationdef validate_code_structure(code: str) -&amp;gt; bool: try: ast.parse(code) return True except SyntaxError: return Falseclass ValidationError(Exception): passdef ensure_valid_translation( original: str, translated: str, target_lang: str) -&amp;gt; str: if not is_valid_syntax(translated, target_lang): raise ValidationError(&quot;Invalid translation&quot;) return translatedLessons Learned Prompt Engineering is Crucial Carefully crafted prompts improve translation accuracy Context windows need optimization Temperature settings affect code style Performance Considerations Async processing for better throughput Caching frequently used translations Batch processing for multiple files Error Handling Robust validation at each step Graceful fallbacks for failed translations Comprehensive logging for debugging Future Improvements Enhanced Language Support Add support for more programming languages Improve handling of language-specific features Better type system translations Performance Optimizations Implement distributed processing Add more caching layers Optimize prompt lengths Developer Experience IDE integrations CLI tool API client libraries View the project on GitHub ‚Üí" }, { "title": "LinkedinAgent: Automating Job Search with AI", "url": "/ShamalBlog/posts/LinkedinAgent-Development/", "categories": "Projects, Automation", "tags": "python, selenium, mongodb, linkedin", "date": "2024-03-10 12:00:00 +0530", "snippet": "Why Build a LinkedIn Automation Tool?The job search process can be overwhelming. LinkedinAgent was born from my own experience of spending hours on repetitive LinkedIn tasks. Here‚Äôs how I automated it.Technical ArchitectureThe system comprises: Selenium-based Scraper: For data collection MongoDB Backend: For data storage Analytics Engine: For insights generationKey Features Profile Optimization Keyword analysis Content suggestions Network recommendations Application Automation Smart filtering Auto-apply capabilities Follow-up tracking Explore the full project ‚Üí" }, { "title": "Introduction to Reinforcement Learning", "url": "/ShamalBlog/posts/IntotoReinforcementLearning/", "categories": "Reinforcement Learning, Introduction", "tags": "learning, RL", "date": "2022-01-03 21:30:00 +0530", "snippet": "Multi-Armed Bandits in Reinforcement Learning Course (3 Credits)1. Introduction to Reinforcement Learning2. Multi-Armed Bandit Problem2.1 Ak-armed Bandit Problem2.2 Action-value Methods2.3 The 10-armed Testbed2.4 Incremental Implementation2.5 Tracking a Nonstationary Problem2.6 Optimistic Initial Values2.7 Upper-Confidence-Bound Action Selection2.8 Gradient Bandit Algorithms2.9 Associative Search (Contextual Bandits)2.10 SummaryA Good start to the topic of our discussion - Reinforcement Learning and Multi-Armed Bandit Problem.Ask yourself: How can we make optimal decisions when faced with multiple uncertain choices? How do we balance exploring new options and exploiting known rewards?To dive into these questions, we first explore the characteristics of multi-armed bandits: Ak-armed Bandit Problem: This foundational concept in reinforcement learning involves a scenario where we have multiple actions (arms) to choose from, each providing a different, unknown reward. The goal is to maximize the total reward over time by learning which actions are the best. This problem models various real-world scenarios, such as clinical trials, financial investments, and adaptive advertising strategies. Action-value Methods: These methods help estimate the expected reward of actions to guide decision-making. By maintaining and updating value estimates for each action, we can balance exploration (trying new actions) and exploitation (choosing the best-known action). Key techniques include: Sample-average method: Updates the value estimate with the average of observed rewards. Weighted average method: Gives more weight to recent observations, useful in nonstationary environments. action-value methods The 10-armed Testbed: A standard experimental setup to evaluate and compare different action-value methods. This testbed involves a simulated environment with ten arms, each providing rewards from a normal distribution with different means. It helps understand the effectiveness of various strategies under controlled conditions, providing insights into their strengths and weaknesses. Incremental Implementation: This refers to updating action-value estimates efficiently without needing to store all past rewards. The key formula for incremental updates is:[ Q_{n+1} = Q_n + \\frac{1}{n} \\left( R_n - Q_n \\right) ]This approach ensures updates are computationally inexpensive and memory efficient, making it suitable for real-time applications. Tracking a Nonstationary Problem: In nonstationary environments, the reward probabilities of actions change over time. To adapt, we use methods like: Exponential recency-weighted average: Gives more weight to recent rewards, quickly adapting to changes. Sliding window average: Considers only the most recent observations, discarding old data. tracking nonstationary problems Optimistic Initial Values: This technique involves starting with high value estimates for all actions, encouraging exploration since initial trials are likely to be rewarded, leading to quicker discovery of high-reward actions. Upper-Confidence-Bound Action Selection: This method balances exploration and exploitation by considering both the estimated value and the uncertainty of each action. The UCB formula is:[ A_t = \\arg \\max_a \\left( Q_t(a) + c \\sqrt{\\frac{\\ln t}{N_t(a)}} \\right) ]Here, ( Q_t(a) ) is the estimated value, ( N_t(a) ) is the count of action ( a ) being chosen, and ( c ) is a confidence level parameter. UCB ensures that actions with fewer trials are more likely to be explored. Gradient Bandit Algorithms: These algorithms adjust the action preferences directly rather than estimating action values. They use a softmax distribution to choose actions and update preferences based on received rewards. The preference update rule is:[ P_{n+1}(a) = P_n(a) + \\alpha (R_n - \\bar{R})(1 - P_n(a)) ]where ( \\alpha ) is a learning rate and ( \\bar{R} ) is the average reward. gradient bandit algorithms Associative Search (Contextual Bandits): Contextual bandits extend the multi-armed bandit problem by incorporating context or state information into the decision-making process. Each arm‚Äôs reward is conditioned on the current context, allowing for more informed and tailored action selection. Applications include personalized recommendations and adaptive treatment strategies in healthcare.2.10 SummaryThe multi-armed bandit problem and its various methods provide a rich framework for understanding and solving real-world decision-making problems. From basic action-value methods to advanced techniques like UCB and contextual bandits, each approach offers unique insights and tools for tackling uncertainty and optimizing rewards.By exploring these concepts, we gain a deeper appreciation for the challenges and solutions in reinforcement learning. Whether in academia or industry, mastering these techniques empowers us to build intelligent systems capable of making optimal decisions in uncertain environments.summaryI hope you liked it!Wanna know more about me?Follow me on GitHub and LinkedIn" }, { "title": "Introduction to Mobile Computing", "url": "/ShamalBlog/posts/IntroToMobileComputing/", "categories": "MobileComputing, Introduction", "tags": "learning, mobilecomputing", "date": "2022-01-02 21:30:00 +0530", "snippet": "Mobile Computing Course (3 Credits)1. Introduction to Mobile Networks2. Types - MANET, WSN, VANET, PAN, DTN, Cellular3. Reference Models for Network communicationA Good start to the topic of our discussion - Mobile Computing.Ask yourself:Q1. What will computers look like in ten years?Q2. How will users network with the help of these next-gen computers?So take a step back, a computer exhibits one of the following characteristics:‚óè Fixed and wired: It describes the typical desktop computer in an office. Neither weight nor power consumption of the devices allow for mobile usage. The devices use fixed networks for performance reasons.‚óè Mobile and wired: Many of today‚Äôs laptops fall into this category; users carry the laptop from one hostel to the next, reconnecting to the company‚Äôs network via the telephone network and a modem.‚óè Fixed and wireless: This mode is used for installing networks, e.g., in historical buildings to avoid damage by installing wires, or at trade shows to ensure fast network setup. Another example is bridging the last mile to a customer by a new operator that has no wired infrastructure and does not want to lease lines from a competitor.‚óè Mobile and wireless: No cable restricts the user, who can roam between different wireless networks. A successful example is GSM with more than 800 million users.So two properties pop up in this discussion, User mobility and Device portability: User mobility refers to a user who has access to the same or similar telecommunication services at different places, i.e., the user can be mobile, and the services will follow him or her. Eg: Simple call-forwarding solutions known from the telephone or computer desktops supporting roaming (i.e., the desktop looks the same no matter which computer a user uses to log into the network). Device portability, the communication device moves (with or without a user). Many mechanisms in the network and inside the device have to make sure that communication is still possible while the device is moving. Eg: Mobile phone system, where the system itself hands the device from one radio transmitter (also called a base station) to the next if the signal becomes too weak.We already know that ‚ÄòWireless‚Äô is a way of accessing a network or other communication partners, i.e., without a wire. The wire is replaced by the transmission of electromagnetic waves through ‚Äòthe air‚Äô (although wireless transmission does not need any medium).mobile communications road traffic1.1 Some applications of wireless communication1.1.1 VehiclesMusic, news, road conditions, weather reports, and other broadcast information are received via digital audio broadcasting (DAB) with 1.5 Mbit/s. For personal communication, a universal mobile telecommunications system (UMTS) phone might be available offering voice and data connectivity with 384 kbit/s. For remote areas, satellite communication can be used, while the current position of the car is determined via the global positioning system (GPS). Cars driving in the same area build a local ad-hoc network for the fast exchange of information in emergency situations. In case of an accident, not only will the airbag be triggered, but the police and ambulance service will be informed via an emergency call to a service provider. In the future, cars will also inform other cars about accidents via the ad-hoc network to help them slow down in time, even before a driver can recognize an accident. Buses, trucks, and trains are already transmitting maintenance and logistic information to their home base, which helps to improve organization (fleet management), and saves time and money. Networks with a fixed infrastructure like cellular phones (GSM, UMTS) will be interconnected with trunked radio systems (TETRA) and wireless LANs (WLAN). Satellite communication links can also be used. The networks between cars and inside each car will more likely work in an ad-hoc fashion. Wireless pico networks inside a car can comprise personal digital assistants, laptops, or mobile phones. Connected with each other using Bluetooth technology. Think of similar scenarios for air traffic or railroad traffic. Different problems can occur here due to speed. While aircraft typically travel at up to 900 km/h and current trains up to 350 km/h, many technologies cannot operate if the relative speed of a mobile device exceeds, e.g., 250 km/h for GSM or 100 km/h for AMPS. Only some technologies, like DAB work up to 900 km/h (unidirectional only).adhoc network1.1.2 EmergenciesImagine the possibilities of an ambulance with a high-quality wireless connection to a hospital. Vital information about injured persons can be sent to the hospital from the scene of the accident. All the necessary steps for this particular type of accident can be prepared and specialists can be consulted for an early diagnosis. Wireless networks are the only means of communication in the case of natural disasters such as hurricanes or earthquakes. In the worst cases, only decentralized, wireless ad-hoc networks survive. Because the breakdown of all cabling not only implies the failure of the standard wired telephone system, but also the crash of all mobile phone systems requiring base stations!1.1.3 BusinessA travelling salesman today needs instant access to the company‚Äôs database: to ensure that files on his or her laptop reflect the current situation, to enable the company to keep track of all activities of their travelling employees, to keep databases consistent etc. With wireless access, the laptop can be turned into a true mobile office, but efficient and powerful synchronization mechanisms are needed to ensure data consistency. When employees try to communicate off base. At home, the laptop connects via a WLAN or LAN and DSL to the Internet. Leaving home requires a handover to another technology, e.g., to an enhanced version of GSM, as soon as the WLAN coverage ends. Due to interference and other factors, data rates drop while cruising at higher speed.1.1.4 Replacement of wired networksWireless networks can replace wired networks, e.g., remote sensors, for tradeshows, or in historic buildings. Due to economic reasons, it is often impossible to wire remote sensors for weather forecasts, earthquake detection, or to provide environmental information. Wireless connections, e.g., via satellite, can help in this situation. Tradeshows need a highly dynamic infrastructure, but cabling takes a long time and frequently proves to be too inflexible. Many computer fairs use WLANs as a replacement for cabling. Other cases for wireless networks are computers, sensors, or information displays in historical buildings, where excess cabling may destroy valuable walls or floors. Wireless access points in a corner of the room can represent a solution.1.1.5 Infotainment and moreInternet everywhere? Not without wireless networks! Imagine a travel guide for a city. Static information might be loaded via CD-ROM, DVD, or even at home via the Internet. But wireless networks can provide up-to-date information at any appropriate location. The travel guide might tell you something about the history of a building (knowing via GPS, contact to a local base station, or triangulation where you are) downloading information about a concert in the building at the same evening via a local wireless network. You may choose a seat, pay via electronic cash, and send this information to a service provider. Another growing field of wireless network applications lies in entertainment and games to enable, e.g., ad-hoc gaming networks as soon as people meet to play together.1.1.6 Location dependent servicesMany research in mobile computing and wireless networks try to hide that a wireless link is more error prone than a wired one. Mobile IP tries to hide the fact of changing access points by redirecting packets but keeping the same IP address, and many protocols try to improve link quality using encoding mechanisms or retransmission so that applications made for fixed networks still work.Several services that might depend on the actual location can be distinguished:‚óè Follow-on services: Using mobile computers, a follow-on service could offer the same desktop environment wherever you are in the world. All email would automatically be forwarded and all changes to your desktop and documents would be stored at a central location at your company. If someone wanted to reach you using a multimedia conferencing system, this call would be forwarded to your current location.‚óè Location aware services: Imagine you wanted to print a document sitting in the lobby of a hotel using your laptop. If you drop the document over the printer icon, where would you expect the document to be printed? Certainly not by the printer in your office! For instance, there could be a service in the hostel announcing that a standard laser printer is available in the lobby or a color printer in a hotel meeting room. Your computer might then transmit your personal profile to your hostel which then charges you with the printing costs.‚óè Privacy: The two service classes listed above immediately raise the question of privacy. You might not want video calls following you to dinner, but maybe you would want important emails to be forwarded. There might be locations and/or times when you want to exclude certain services from reaching you and you do not want to be disturbed. You want to utilize location dependent services, but you might not want the environment to know exactly who you are. Imagine a hostel monitoring all students and selling these profiles to companies for advertisements.‚óè Information services: A service could also actively ‚Äòpush‚Äô information on your travel guide, e.g., the Mexican restaurant just around the corner has a special taco offer.‚óè Support services: Intermediate results of calculations, state information, or cache contents could ‚Äòfollow‚Äô the mobile node through the fixed network. As soon as the mobile node reconnects, all information is available again. This helps to reduce access delay and traffic within the fixed network. Caching of data on the mobile device (standard for all desktop systems) is often not possible due to limited memory capacity. The alternative would be a central location for user information and a user accessing this information through the (possibly large and congested) network all the time as it is often done today.1.1.7 Mobile and wireless devicesThere is no precise classification of such devices, by size, shape, weight, or computing power. Currently, laptops are considered the upper end of the mobile device range.Some examples of mobile and wireless devices graded by increasing performance (CPU, memory, display, input devices):‚óè Sensor: A very simple wireless device is represented by a sensor transmitting state information. Eg: A switch sensing the office door. If the door is closed, the switch transmits this to the mobile phone inside the office which will not accept incoming calls. Without user interaction, the semantics of a closed door is applied to phone calls.‚óè Embedded controllers: Many appliances already contain a simple or sometimes more complex controller. Keyboards, mice, headsets, washing machines, coffee machines, hair dryers and TV sets are just some examples. Why not have the hair dryer as a simple mobile and wireless device (from a communication point of view) that is able to communicate with the mobile phone? Then the dryer would switch off as soon as the phone starts ringing ‚Äì that would be a nice application!‚óè Pager: As a very simple receiver, a pager can only display short text messages, has a tiny display, and cannot send any messages.‚óè Mobile phones: Mobile phones with full color graphic display, touch screen, and Internet browser are easily available.‚óè Personal digital assistant: PDAs typically accompany a user and offer simple versions of office software (calendar, note-pad, mail). The typical input device is a pen, with built-in character recognition translating handwriting into characters. Web browsers and many other software packages are available for these devices.‚óè Pocket computer: The next steps toward full computers are pocket computers offering tiny keyboards, color displays, and simple versions of programs found on desktop computers (text processing, spreadsheets etc.).‚óè Notebook/laptop: Finally, laptops offer more or less the same performance as standard desktop computers; they use the same software ‚Äì the only technical difference being size, weight, and the ability to run on a battery. If operated mainly via a sensitive display (touch sensitive or electromagnetic), the devices are also known as notepads or tablet PCs.One big problem, which has not yet been solved, is the energy supply. The more features that are built into a device, the more power it needs. The higher the performance of the device, the faster it drains the batteries. Furthermore, wireless data transmission consumes a lot of energy.1.5 A simplified reference model:The basic reference model used to structure communication systems. Let‚Äôs see it using an example, PDA - a wireless and portable device, communicates with a base station. The base station consists of a radio transceiver (sender and receiver) and an interworking unit connecting the wireless link with the fixed link. The communication partner of the PDA is a conventional computer. Underneath each network element (such as PDA, interworking unit, computer), the protocol stack is implemented in the system according to the reference model. End-systems, such as the PDA and computer, need a full protocol stack comprising the application layer, transport layer, network layer, data link layer, and physical layer. Applications on the end-systems communicate with each other using the lower layer services. Intermediate systems, such as the interworking unit, do not necessarily need all of the layers. Only the network, data link, and physical layers are required as only entities at the same level communicate with each other (i.e., transport with transport, network with network) the end-system applications do not notice the intermediate system directly.The functions of each layer in a wireless and mobile environment are:‚óè Physical layer: The lowest layer in a communication system and is responsible for the conversion of a stream of bits into signals that can be transmitted on the sender side. The physical layer of the receiver then transforms the signals back into a bit stream. For wireless communication, the physical layer is responsible for frequency selection, generation of the carrier frequency, signal detection (although heavy interference may disturb the signal), modulation of data onto a carrier frequency and (depending on the transmission scheme) encryption.‚óè Data link layer: The main tasks of this layer include accessing the medium, multiplexing of different data streams, correction of transmission errors, and synchronization (i.e., detection of a data frame). The data link layer is responsible for a reliable point-to-point connection between two devices or a point-to-multipoint connection between one sender and several receivers.‚óè Network layer: This third layer is responsible for routing packets through a network or establishing a connection between two entities over many other intermediate systems. Important topics are addressing, routing, device location, and handover between different networks.‚óè Transport layer: This layer is used in the reference model to establish an end-to-end connection. Quality of service, flow and congestion control are especially relevant if the transport protocols known from the Internet, TCP and UDP, are to be used over a wireless link.‚óè Application layer: Finally, the applications (complemented by additional layers that can support applications) are situated on top of all transmission-oriented layers. Service location, support for multimedia applications, adaptive applications that can handle the large variations in transmission characteristics, and wireless access to the world wide web using a portable device. Very demanding applications are video (high data rate) and interactive gaming (low jitter, low latency).I hope you liked it!Wanna know more about me?Follow me on GitHub and LinkedIn" }, { "title": "Fresh Blogging Start", "url": "/ShamalBlog/posts/FreshStart/", "categories": "Personal, New", "tags": "personal", "date": "2022-01-01 12:00:00 +0530", "snippet": "WelcomeHello world, this is my first blog post.I hope you like it!I have some great ideas and for the future!Wanna know more about me?Follow me on GitHub and LinkedInLet‚Äôs Start Blogging this new year!" } ]
